# üß© GitHub Actions Workflow ‚Äî ShopHikes
# üöÄ Deploy Next.js (standalone) to Lightsail with PM2
# ‚öôÔ∏è Optimized with caching, concurrency, and smart skip logic
# üí° Keeps all existing env, Sanity, Upstash, and PM2 functionality intact

name: "üöÄ Deploy ShopHikes to Lightsail"

on:
  push:
    branches:
      - main

concurrency:
  group: deploy-shophikes-main
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      # üåê Public (Repository Variables)
      NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ vars.NEXT_PUBLIC_SANITY_PROJECT_ID }}
      NEXT_PUBLIC_SANITY_DATASET: ${{ vars.NEXT_PUBLIC_SANITY_DATASET }}
      NEXT_PUBLIC_SANITY_API_VERSION: ${{ vars.NEXT_PUBLIC_SANITY_API_VERSION }}
      NEXT_PUBLIC_BASE_URL: ${{ vars.NEXT_PUBLIC_BASE_URL }}

      # üîí Private (Repository Variables)
      SANITY_API_READ_TOKEN: ${{ vars.SANITY_API_READ_TOKEN }}
      SANITY_API_TOKEN: ${{ vars.SANITY_API_TOKEN }}

      # üß± Upstash (Repository Variables)
      UPSTASH_REDIS_REST_URL: ${{ vars.UPSTASH_REDIS_REST_URL }}
      UPSTASH_REDIS_REST_TOKEN: ${{ vars.UPSTASH_REDIS_REST_TOKEN }}

      # üîë SSH (Repository Variables)
      SSH_USER: ${{ vars.SSH_USER }}
      SSH_HOST: ${{ vars.SSH_HOST }}
      SSH_PRIVATE_KEY: ${{ vars.SSH_PRIVATE_KEY }}

      # üì¶ Deploy target on server
      APP_DIR: ${{ vars.APP_DIR }}

      # üß™ No telemetry in CI
      NEXT_TELEMETRY_DISABLED: 1

    steps:
      - name: "üîç Checkout"
        uses: actions/checkout@v4

      # ‚ö° Detect whether we actually need to build/deploy
      - name: "üß© Detect relevant changes"
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            deploy:
              - 'app/**'
              - 'components/**'
              - 'lib/**'
              - 'pages/**'
              - 'public/**'
              - 'styles/**'
              - 'next.config.*'
              - 'package.json'
              - 'pnpm-lock.yaml'
              - '.env*'
              - 'sanity.config.*'
              - 'ecosystem.config.js'

      - name: "üß† Skip build if no relevant changes"
        if: steps.changes.outputs.deploy == 'false'
        run: |
          echo "‚úÖ No deploy-related changes detected. Skipping build and deploy."
          exit 0

      - name: "üì¶ Setup PNPM"
        uses: pnpm/action-setup@v4
        with:
          version: 10.19.0
          run_install: false

      - name: "üü¢ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: "üóÉÔ∏è Cache pnpm store"
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: "‚ö° Cache Next.js build cache"
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('pnpm-lock.yaml') }}-${{ hashFiles('next.config.*', 'tsconfig.json') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('pnpm-lock.yaml') }}-

      - name: "üì• Install dependencies"
        run: pnpm install --frozen-lockfile

      - name: "üßº Sanitize build env + assert"
        shell: bash
        run: |
          set -euo pipefail
          strip(){ v="$1"; v="${v//\"/}"; v="${v//\'/}"; v="${v// /}"; printf '%s' "$v"; }

          echo "NEXT_PUBLIC_SANITY_PROJECT_ID=$(strip "${NEXT_PUBLIC_SANITY_PROJECT_ID:-}")" >> "$GITHUB_ENV"
          echo "NEXT_PUBLIC_SANITY_DATASET=$(strip "${NEXT_PUBLIC_SANITY_DATASET:-}")" >> "$GITHUB_ENV"
          echo "NEXT_PUBLIC_SANITY_API_VERSION=$(strip "${NEXT_PUBLIC_SANITY_API_VERSION:-2025-10-28}")" >> "$GITHUB_ENV"
          echo "NEXT_PUBLIC_BASE_URL=$(strip "${NEXT_PUBLIC_BASE_URL:-}")" >> "$GITHUB_ENV"

          echo "SANITY_API_READ_TOKEN=$(strip "${SANITY_API_READ_TOKEN:-}")" >> "$GITHUB_ENV"
          echo "SANITY_API_TOKEN=$(strip "${SANITY_API_TOKEN:-}")" >> "$GITHUB_ENV"
          echo "UPSTASH_REDIS_REST_URL=$(strip "${UPSTASH_REDIS_REST_URL:-}")" >> "$GITHUB_ENV"
          echo "UPSTASH_REDIS_REST_TOKEN=$(strip "${UPSTASH_REDIS_REST_TOKEN:-}")" >> "$GITHUB_ENV"

          : "${NEXT_PUBLIC_SANITY_PROJECT_ID:?Missing NEXT_PUBLIC_SANITY_PROJECT_ID}"
          : "${NEXT_PUBLIC_SANITY_DATASET:?Missing NEXT_PUBLIC_SANITY_DATASET}"

      - name: "üèóÔ∏è Build (standalone, fast)"
        env:
          NEXT_DISABLE_ESLINT: 1
          NEXT_DISABLE_TYPECHECK: 1
        run: pnpm run build

      - name: "üì¶ Package standalone"
        shell: bash
        run: |
          set -euo pipefail
          test -f ".next/standalone/server.js" || { echo "Missing .next/standalone/server.js"; exit 1; }
          SHORT_SHA="${GITHUB_SHA::7}"
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          rm -rf out && mkdir -p out
          cp -r .next/standalone out/standalone
          cp -r .next/static out/standalone/.next/static
          [ -d public ] && cp -r public out/standalone/public
          tar -C out -czf "shophikes_${SHORT_SHA}.tar.gz" standalone

      - name: "üîê Setup SSH"
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          printf '%s\n' "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          sed -i 's/\r$//' ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=yes -o BatchMode=yes "$SSH_USER@$SSH_HOST" true

      - name: "üßæ Create ecosystem.config.js"
        shell: bash
        run: |
          set -euo pipefail
          : > ecosystem.config.js
          cat <<'EOF' >> ecosystem.config.js
  
          module.exports = {
          apps: [
              {
                name: "shophikes",
                cwd: "/home/bitnami/htdocs/Ecommerce-with-sanity/current",
                script: "standalone/server.js",
                instances: 1,
                exec_mode: "cluster",
                watch: false,
                env: {
                  PORT: 3005,
                  NODE_ENV: "production",
                  SANITY_API_READ_TOKEN: "__SANITY_API_READ_TOKEN__",
                  SANITY_API_TOKEN: "__SANITY_API_TOKEN__",
                  UPSTASH_REDIS_REST_URL: "__UPSTASH_REDIS_REST_URL__",
                  UPSTASH_REDIS_REST_TOKEN: "__UPSTASH_REDIS_REST_TOKEN__"
                }
            }
          ]
          }
          
          EOF

          esc() { printf "%s" "${1:-}" | sed -e 's/[\/&]/\\&/g'; }
          sed -i "s/__SANITY_API_READ_TOKEN__/$(esc "${SANITY_API_READ_TOKEN}")/" ecosystem.config.js
          sed -i "s/__SANITY_API_TOKEN__/$(esc "${SANITY_API_TOKEN}")/" ecosystem.config.js
          sed -i "s/__UPSTASH_REDIS_REST_URL__/$(esc "${UPSTASH_REDIS_REST_URL}")/" ecosystem.config.js
          sed -i "s/__UPSTASH_REDIS_REST_TOKEN__/$(esc "${UPSTASH_REDIS_REST_TOKEN}")/" ecosystem.config.js

      - name: "‚¨ÜÔ∏è Upload artifact + ecosystem"
        run: |
          scp -i ~/.ssh/id_rsa "shophikes_${SHORT_SHA}.tar.gz" "$SSH_USER@$SSH_HOST:/tmp/"
          scp -i ~/.ssh/id_rsa ecosystem.config.js "$SSH_USER@$SSH_HOST:/tmp/"

      - name: "üöÄ Activate release + PM2 start"
        run: |
          ssh -i ~/.ssh/id_rsa "$SSH_USER@$SSH_HOST" "
            set -euo pipefail
            RELEASES_DIR='${APP_DIR}/releases'
            CURRENT_LINK='${APP_DIR}/current'
            NEW_RELEASE_DIR=\"\$RELEASES_DIR/${SHORT_SHA}\"
            mkdir -p \"\$RELEASES_DIR\" '${APP_DIR}'/logs
            rm -rf \"\$NEW_RELEASE_DIR\" && mkdir -p \"\$NEW_RELEASE_DIR\"
            tar -xzf \"/tmp/shophikes_${SHORT_SHA}.tar.gz\" -C \"\$NEW_RELEASE_DIR\"
            rm -f \"/tmp/shophikes_${SHORT_SHA}.tar.gz\"
            ln -sfn \"\$NEW_RELEASE_DIR\" \"\$CURRENT_LINK\"
            if ! command -v pm2 >/dev/null 2>&1; then npm i -g pm2; fi
            mv /tmp/ecosystem.config.js '${APP_DIR}'/ecosystem.config.js
            echo 'üîÅ Restarting PM2 process...'
            if pm2 list | grep -q shophikes; then
              pm2 reload shophikes || (pm2 delete shophikes && pm2 start '${APP_DIR}'/ecosystem.config.js --only shophikes)
            else
              pm2 start '${APP_DIR}'/ecosystem.config.js --only shophikes
            fi
            pm2 save
            echo '‚úÖ PM2 process updated successfully.'
          "
