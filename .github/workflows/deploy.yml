name: Deploy ShopHikes to Lightsail

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      # Public Sanity config (Repository Variables)
      NEXT_PUBLIC_SANITY_PROJECT_ID: ${{ vars.NEXT_PUBLIC_SANITY_PROJECT_ID }}
      NEXT_PUBLIC_SANITY_DATASET: ${{ vars.NEXT_PUBLIC_SANITY_DATASET }}
      NEXT_PUBLIC_SANITY_API_VERSION: ${{ vars.NEXT_PUBLIC_SANITY_API_VERSION }}
      NEXT_PUBLIC_BASE_URL: ${{ vars.NEXT_PUBLIC_BASE_URL }}

      # Private Sanity tokens (Secrets preferred; Variables fallback)
      SANITY_API_READ_TOKEN_SEC: ${{ secrets.SANITY_API_READ_TOKEN }}
      SANITY_API_READ_TOKEN_VAR: ${{ vars.SANITY_API_READ_TOKEN }}
      SANITY_API_TOKEN_SEC: ${{ secrets.SANITY_API_TOKEN }}
      SANITY_API_TOKEN_VAR: ${{ vars.SANITY_API_TOKEN }}

      # Deploy targets (provide both contexts; coalesce in a step)
      SSH_USER_SEC: ${{ secrets.SSH_USER }}
      SSH_HOST_SEC: ${{ secrets.SSH_HOST }}
      SSH_PRIVATE_KEY_SEC: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_USER_VAR: ${{ vars.SSH_USER }}
      SSH_HOST_VAR: ${{ vars.SSH_HOST }}
      SSH_PRIVATE_KEY_VAR: ${{ vars.SSH_PRIVATE_KEY }}
      APP_DIR: ${{ vars.APP_DIR }}

      NEXT_TELEMETRY_DISABLED: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 10.19.0
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Next.js build cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('pnpm-lock.yaml') }}-${{ hashFiles('**/*.[jt]s', '**/*.[jt]sx', 'next.config.*', 'tsconfig.json') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('pnpm-lock.yaml') }}-
      # Normalize env, set fallbacks, and persist to GITHUB_ENV
      - name: Normalize/verify environment
        shell: bash
        run: |
          set -euo pipefail
          sanitize() { v="$1"; v="${v%\"}"; v="${v#\"}"; printf '%s' "$v"; }

          # Public Sanity config with default apiVersion
          NPID="$(sanitize "${NEXT_PUBLIC_SANITY_PROJECT_ID:-}")"
          NPDATASET="$(sanitize "${NEXT_PUBLIC_SANITY_DATASET:-}")"
          NPAPIVER="$(sanitize "${NEXT_PUBLIC_SANITY_API_VERSION:-}")"
          if [ -z "$NPAPIVER" ]; then NPAPIVER="2025-10-28"; fi
          NPBASEURL="$(sanitize "${NEXT_PUBLIC_BASE_URL:-}")"

          # Tokens: prefer secrets, fallback to variables
          READ_TOKEN="$(sanitize "${SANITY_API_READ_TOKEN_SEC:-}")"
          if [ -z "$READ_TOKEN" ]; then READ_TOKEN="$(sanitize "${SANITY_API_READ_TOKEN_VAR:-}")"; fi
          WRITE_TOKEN="$(sanitize "${SANITY_API_TOKEN_SEC:-}")"
          if [ -z "$WRITE_TOKEN" ]; then WRITE_TOKEN="$(sanitize "${SANITY_API_TOKEN_VAR:-}")"; fi

          # SSH: prefer secrets, fallback to variables, then fail if missing
          DEPLOY_SSH_USER="$(sanitize "${SSH_USER_SEC:-}")"
          if [ -z "$DEPLOY_SSH_USER" ]; then DEPLOY_SSH_USER="$(sanitize "${SSH_USER_VAR:-}")"; fi

          DEPLOY_SSH_HOST="$(sanitize "${SSH_HOST_SEC:-}")"
          if [ -z "$DEPLOY_SSH_HOST" ]; then DEPLOY_SSH_HOST="$(sanitize "${SSH_HOST_VAR:-}")"; fi

          DEPLOY_SSH_KEY="$(sanitize "${SSH_PRIVATE_KEY_SEC:-}")"
          if [ -z "$DEPLOY_SSH_KEY" ]; then DEPLOY_SSH_KEY="$(sanitize "${SSH_PRIVATE_KEY_VAR:-}")"; fi

          # Persist for subsequent steps
          {
            echo "NEXT_PUBLIC_SANITY_PROJECT_ID=$NPID"
            echo "NEXT_PUBLIC_SANITY_DATASET=$NPDATASET"
            echo "NEXT_PUBLIC_SANITY_API_VERSION=$NPAPIVER"
            echo "NEXT_PUBLIC_BASE_URL=$NPBASEURL"
            echo "SANITY_API_READ_TOKEN=$READ_TOKEN"
            echo "SANITY_API_TOKEN=$WRITE_TOKEN"
            echo "DEPLOY_SSH_USER=$DEPLOY_SSH_USER"
            echo "DEPLOY_SSH_HOST=$DEPLOY_SSH_HOST"
            echo "DEPLOY_SSH_KEY<<EOF"
            echo "$DEPLOY_SSH_KEY"
            echo "EOF"
          } >> "$GITHUB_ENV"

          # Required checks
          : "${NEXT_PUBLIC_SANITY_PROJECT_ID:?Missing NEXT_PUBLIC_SANITY_PROJECT_ID}"
          : "${NEXT_PUBLIC_SANITY_DATASET:?Missing NEXT_PUBLIC_SANITY_DATASET}"
          : "${NEXT_PUBLIC_SANITY_API_VERSION:?Missing NEXT_PUBLIC_SANITY_API_VERSION}"
          : "${SANITY_API_READ_TOKEN:?Missing SANITY_API_READ_TOKEN}"
          : "${DEPLOY_SSH_USER:?Missing SSH_USER (secret or variable)}"
          : "${DEPLOY_SSH_HOST:?Missing SSH_HOST (secret or variable)}"
          : "${DEPLOY_SSH_KEY:?Missing SSH_PRIVATE_KEY (secret or variable)}"

      # Build (ensure next.config sets output: 'standalone')
      - name: Build app (standalone)
        run: pnpm run build

      - name: Package standalone artifact
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -d ".next/standalone" ]; then
            echo "ERROR: .next/standalone not found; set output: 'standalone' in next.config and rebuild." >&2
            exit 1
          fi
          SHORT_SHA="${GITHUB_SHA::7}"
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          rm -rf out && mkdir -p out/server/.next
          cp -r .next/standalone/* out/server/
          cp -r .next/static out/server/.next/static
          if [ -d public ]; then cp -r public out/server/public; fi
          tar -C out -czf "shophikes_${SHORT_SHA}.tar.gz" .

      - name: Setup SSH
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          # Read multi-line key from GITHUB_ENV
          awk 'f{print} /^DEPLOY_SSH_KEY<<EOF$/{f=1;next} /^EOF$/{exit}' "$GITHUB_ENV" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "$DEPLOY_SSH_HOST" >> ~/.ssh/known_hosts

      - name: Upload artifact
        run: scp -i ~/.ssh/id_rsa "shophikes_${SHORT_SHA}.tar.gz" ${DEPLOY_SSH_USER}@${DEPLOY_SSH_HOST}:/tmp/

      - name: Activate release and zero-downtime reload
        env:
          PORT: 3005
          NODE_ENV: production
        run: |
          ssh -i ~/.ssh/id_rsa ${DEPLOY_SSH_USER}@${DEPLOY_SSH_HOST} "
            set -euo pipefail
            RELEASES_DIR=\"${APP_DIR}/releases\"
            CURRENT_LINK=\"${APP_DIR}/current\"
            NEW_RELEASE_DIR=\"\$RELEASES_DIR/${SHORT_SHA}\"
            mkdir -p \"\$RELEASES_DIR\" \"${APP_DIR}/logs\"
            rm -rf \"\$NEW_RELEASE_DIR\"
            mkdir -p \"\$NEW_RELEASE_DIR\"
            tar -xzf \"/tmp/shophikes_${SHORT_SHA}.tar.gz\" -C \"\$NEW_RELEASE_DIR\"
            rm -f \"/tmp/shophikes_${SHORT_SHA}.tar.gz\"
            ln -sfn \"\$NEW_RELEASE_DIR\" \"\$CURRENT_LINK\"
            if ! command -v pm2 >/dev/null 2>&1; then npm i -g pm2; fi
            export PORT=${PORT}
            export NODE_ENV=${NODE_ENV}
            APP_SERVER_DIR=\"\$CURRENT_LINK/server\"
            APP_ENTRY=\"\$APP_SERVER_DIR/server.js\"
            if pm2 describe shophikes >/dev/null 2>&1; then
              pm2 reload shophikes --update-env
            else
              pm2 start \"\$APP_ENTRY\" --name shophikes --cwd \"\$APP_SERVER_DIR\" -i 1
            fi
            pm2 save
          "

